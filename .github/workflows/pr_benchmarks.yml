# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: PR Benchmarks

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR Number'
        required: true
      pr_head_sha:
        description: 'PR Head SHA'
        required: true
      base_branch:
        description: 'Base branch to compare against (usually main)'
        required: true
        default: 'main'
      base_sha:
        description: 'Exact SHA of base branch to compare against'
        required: true
      benchmarks:
        description: 'Space-separated list of benchmarks to run'
        required: true
        default: 'tpch_mem clickbench_partitioned'
      comment_id:
        description: 'ID of the comment that triggered the benchmarks'
        required: true

permissions:
  contents: read
  pull-requests: write

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    name: Run PR Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_head_sha }}
          path: pr_branch

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_sha }}
          path: base_branch

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Generate benchmark data
        run: |
          # Run data generation for each benchmark
          cd pr_branch/benchmarks
          
          # Parse benchmarks from input
          IFS=' ' read -r -a BENCHMARKS <<< "${{ github.event.inputs.benchmarks }}"
          
          # Generate data for each benchmark
          for benchmark in "${BENCHMARKS[@]}"; do
            echo "Generating data for $benchmark..."
            ./bench.sh data "$benchmark"
          done

      - name: Run PR branch benchmarks
        id: pr_benchmarks
        run: |
          # Navigate to PR branch
          cd pr_branch/benchmarks

          # Parse benchmarks from input
          IFS=' ' read -r -a BENCHMARKS <<< "${{ github.event.inputs.benchmarks }}"
          
          # Use the branch name as results name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          BRANCH_NAME=${BRANCH_NAME//\//_}
          
          # Run each benchmark
          for benchmark in "${BENCHMARKS[@]}"; do
            echo "Running $benchmark on PR branch..."
            RESULTS_NAME="$BRANCH_NAME" ./bench.sh run "$benchmark"
          done
          
          echo "pr_results_dir=pr_branch/benchmarks/results/$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Run base branch benchmarks
        id: base_benchmarks
        run: |
          # Navigate to base branch
          cd base_branch/benchmarks
          
          # Parse benchmarks from input
          IFS=' ' read -r -a BENCHMARKS <<< "${{ github.event.inputs.benchmarks }}"
          
          # Use 'base_branch' as results name
          BRANCH_NAME="base_${BRANCH_NAME:-main}"
          BRANCH_NAME=${BRANCH_NAME//\//_}
          
          # Run each benchmark
          for benchmark in "${BENCHMARKS[@]}"; do
            echo "Running $benchmark on base branch..."
            RESULTS_NAME="$BRANCH_NAME" ./bench.sh run "$benchmark"
          done
          
          echo "base_results_dir=base_branch/benchmarks/results/$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Install comparison requirements
        run: |
          # Setup virtual environment with requirements
          cd pr_branch/benchmarks
          pip install -r requirements.txt

      - name: Compare benchmark results
        id: compare
        run: |
          # Navigate to PR branch benchmark directory
          cd pr_branch/benchmarks
          
          # Parse benchmarks from input
          IFS=' ' read -r -a BENCHMARKS <<< "${{ github.event.inputs.benchmarks }}"
          
          # Initialize results variable
          COMPARISON_RESULTS=""
          
          # Get the directory names
          PR_RESULTS_DIR="${{ steps.pr_benchmarks.outputs.pr_results_dir }}"
          BASE_RESULTS_DIR="${{ steps.base_benchmarks.outputs.base_results_dir }}"
          
          # For each benchmark, run comparison
          for benchmark in "${BENCHMARKS[@]}"; do
            echo "Comparing $benchmark results..."
            
            # Determine result file names based on benchmark
            if [[ "$benchmark" == "tpch" ]]; then
              RESULT_FILE="tpch_sf1.json"
            elif [[ "$benchmark" == "tpch_mem" ]]; then
              RESULT_FILE="tpch_mem_sf1.json"
            elif [[ "$benchmark" == "tpch10" ]]; then
              RESULT_FILE="tpch_sf10.json"
            elif [[ "$benchmark" == "tpch_mem10" ]]; then
              RESULT_FILE="tpch_mem_sf10.json"
            elif [[ "$benchmark" == "clickbench_1" ]]; then
              RESULT_FILE="clickbench_1.json"
            elif [[ "$benchmark" == "clickbench_partitioned" ]]; then
              RESULT_FILE="clickbench_partitioned.json"
            elif [[ "$benchmark" == "clickbench_extended" ]]; then
              RESULT_FILE="clickbench_extended.json"
            elif [[ "$benchmark" == "imdb" ]]; then
              RESULT_FILE="imdb.json"
            elif [[ "$benchmark" == "external_aggr" ]]; then
              RESULT_FILE="external_aggr.json"
            elif [[ "$benchmark" == "sort_tpch" ]]; then
              RESULT_FILE="sort_tpch.json"
            else
              RESULT_FILE="$benchmark.json"
            fi
            
            # Check if both result files exist
            if [[ -f "$PR_RESULTS_DIR/$RESULT_FILE" && -f "$BASE_RESULTS_DIR/$RESULT_FILE" ]]; then
              # Run comparison and capture output
              OUTPUT=$(python compare.py "$PR_RESULTS_DIR/$RESULT_FILE" "$BASE_RESULTS_DIR/$RESULT_FILE")
              COMPARISON_RESULTS+="## $benchmark\n\n\`\`\`\n$OUTPUT\n\`\`\`\n\n"
            else
              COMPARISON_RESULTS+="## $benchmark\n\nResults not available for comparison.\n\n"
            fi
          done
          
          # Save comparison results to file for use in PR comment
          echo -e "$COMPARISON_RESULTS" > /tmp/benchmark_comparison.txt

      - name: Post results as PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const pr_number = ${{ github.event.inputs.pr_number }};
            const pr_head_sha = '${{ github.event.inputs.pr_head_sha }}';
            const base_branch = '${{ github.event.inputs.base_branch }}';
            const base_sha = '${{ github.event.inputs.base_sha }}';
            const comment_id = ${{ github.event.inputs.comment_id }};
            
            // Read comparison results
            const comparisonText = fs.readFileSync('/tmp/benchmark_comparison.txt', 'utf8');
            
            // Parse benchmarks from input
            const benchmarks = '${{ github.event.inputs.benchmarks }}'.split(' ');
            
            // Create comment with results in collapsible sections
            const comment = `## ðŸ“Š Benchmark Results

            <details>
            <summary>Expand for detailed results</summary>

            \${comparisonText}
            </details>

            Benchmarks run: \${benchmarks.join(', ')}

            Comparing PR branch (\`\${pr_head_sha.substring(0, 8)}\`) with base branch \`\${base_branch}\` (\`\${base_sha.substring(0, 8)}\`)

            Triggered by [this comment](https://github.com/\${context.repo.owner}/\${context.repo.repo}/pull/\${pr_number}#issuecomment-\${comment_id})
            `;
                        
            // Post comment to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: comment
            });